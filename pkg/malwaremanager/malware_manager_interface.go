package malwaremanager

import (
	utils "node-agent/pkg/utils"

	apitypes "github.com/armosec/armoapi-go/armotypes"
	containercollection "github.com/inspektor-gadget/inspektor-gadget/pkg/container-collection"
	tracerexectype "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/exec/types"
	traceropentype "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/open/types"
	igtypes "github.com/inspektor-gadget/inspektor-gadget/pkg/types"
)

type MalwareManagerClient interface {
	ReportFileExec(k8sContainerID string, event tracerexectype.Event)
	ReportFileOpen(k8sContainerID string, event traceropentype.Event)
	ContainerCallback(notif containercollection.PubSubEvent)
}

type MalwareResult interface {
	// Get Basic Runtime Alert
	GetBasicRuntimeAlert() apitypes.BaseRuntimeAlert
	// Get Runtime Process Details
	GetRuntimeProcessDetails() apitypes.ProcessTree
	// Get Trigger Event
	GetTriggerEvent() igtypes.Event
	// Get Malware Description
	GetMalwareRuntimeAlert() apitypes.MalwareAlert
	// Get K8s Runtime Details
	GetRuntimeAlertK8sDetails() apitypes.RuntimeAlertK8sDetails

	// Set Workload Details
	SetWorkloadDetails(workloadDetails string)
	// Set Basic Runtime Alert
	SetBasicRuntimeAlert(basicRuntimeAlert apitypes.BaseRuntimeAlert)
	// Set Runtime Process Details
	SetRuntimeProcessDetails(processTree apitypes.ProcessTree)
	// Set Trigger Event
	SetTriggerEvent(event igtypes.Event)
	// Set Malware Description
	SetMalwareRuntimeAlert(malwareRuntimeAlert apitypes.MalwareAlert)
	// Set K8s Runtime Details
	SetRuntimeAlertK8sDetails(runtimeAlertK8sDetails apitypes.RuntimeAlertK8sDetails)
}

type MalwareScanner interface {
	// Scan scans the event for malware.
	Scan(eventType utils.EventType, event interface{}, containerPid uint32) MalwareResult
}
