package malwaremanager

import (
	"node-agent/pkg/malwaremanager"
	utils "node-agent/pkg/malwaremanager/utils"
	mmv1 "node-agent/pkg/malwaremanager/v1"
	mmtypes "node-agent/pkg/malwaremanager/v1/types"
	nautils "node-agent/pkg/utils"

	"os"
	"strings"

	"github.com/cenkalti/backoff/v4"
	logger "github.com/kubescape/go-logger"
	"github.com/kubescape/go-logger/helpers"

	humanize "github.com/dustin/go-humanize"
	"github.com/dutchcoders/go-clamd"
	tracerexectype "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/exec/types"
	traceropentype "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/open/types"
)

type ClamAVClient struct {
	clamd *clamd.Clamd
	cfg   *ClamAVConfig
}

var _ mmv1.MalwareScanner = (*ClamAVClient)(nil)

func CreateClamAVClient(cfg *ClamAVConfig) (*ClamAVClient, error) {
	clamdAddress, err := cfg.GetNormalizedAddress()
	if err != nil {
		return nil, err
	}

	clamd := clamd.NewClamd(clamdAddress)
	clamavClient := ClamAVClient{
		clamd: clamd,
		cfg:   cfg,
	}

	// Ping ClamAV with backoff to ensure it is up and running.
	if err := backoff.Retry(func() error {
		return clamavClient.Ping()
	}, backoff.NewExponentialBackOff()); err != nil {
		logger.L().Error("Error pinging ClamAV", helpers.Error(err))
		return nil, err
	}

	return &clamavClient, nil
}

func (c *ClamAVClient) Scan(eventType nautils.EventType, event interface{}, containerPid uint32) malwaremanager.MalwareResult {
	// Check if the event is of type tracerexectype.Event or traceropentype.Event.
	if eventType != nautils.ExecveEventType && eventType != nautils.OpenEventType {
		return nil
	}

	if eventType == nautils.ExecveEventType {
		return c.handleExecEvent(event.(*tracerexectype.Event), containerPid)
	} else if eventType == nautils.OpenEventType {
		return c.handleOpenEvent(event.(*traceropentype.Event), containerPid)
	}

	return nil
}

func (c *ClamAVClient) handleExecEvent(execEvent *tracerexectype.Event, containerPid uint32) malwaremanager.MalwareResult {
	if execEvent == nil {
		return nil
	}

	hostFilePath, err := utils.GetHostFilePathFromEvent(execEvent, containerPid)
	if err != nil {
		logger.L().Error("Error getting host file path", helpers.Error(err))
		return nil
	}

	logger.L().Info("Scanning file", helpers.String("path", hostFilePath))

	response, err := c.clamd.ScanFile(hostFilePath)
	if err != nil {
		logger.L().Error("Error scanning file", helpers.Error(err))
		return nil
	}

	for result := range response {
		if result.Status == clamd.RES_FOUND {
			// A malware was found, send an alert.
			sha256hash, err := utils.CalculateSHA256FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			sha1hash, err := utils.CalculateSHA1FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			md5hash, err := utils.CalculateMD5FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			size, err := utils.GetFileSize(result.Path)
			if err != nil {
				logger.L().Error("Error getting file size of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			path := strings.TrimPrefix(result.Path, os.Getenv("HOST_ROOT"))
			return &mmtypes.GenericMalwareResult{
				Name:                 result.Description,
				Description:          result.Description,
				Path:                 path,
				SHA256Hash:           sha256hash,
				SHA1Hash:             sha1hash,
				MD5Hash:              md5hash,
				Size:                 humanize.IBytes(uint64(size)),
				IsPartOfImage:        execEvent.UpperLayer,
				Namespace:            execEvent.GetNamespace(),
				PodName:              execEvent.GetPod(),
				ContainerName:        execEvent.GetContainer(),
				ContainerID:          execEvent.Runtime.ContainerID,
				ContainerImage:       execEvent.GetContainerImageName(),
				ContainerImageDigest: execEvent.Runtime.ContainerImageDigest,
			}
		}
	}

	return nil
}

func (c *ClamAVClient) handleOpenEvent(openEvent *traceropentype.Event, containerPid uint32) malwaremanager.MalwareResult {
	if openEvent == nil {
		return nil
	}

	hostFilePath, err := utils.GetHostFilePathFromEvent(openEvent, containerPid)
	if err != nil {
		logger.L().Error("Error getting host file path", helpers.Error(err))
		return nil
	}

	logger.L().Info("Scanning file", helpers.String("path", hostFilePath))

	response, err := c.clamd.ScanFile(hostFilePath)
	if err != nil {
		logger.L().Error("Error scanning file", helpers.Error(err))
		return nil
	}

	for result := range response {
		if result.Status == clamd.RES_FOUND {
			// A malware was found, send an alert.
			sha256hash, err := utils.CalculateSHA256FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			sha1hash, err := utils.CalculateSHA1FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			md5hash, err := utils.CalculateMD5FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			size, err := utils.GetFileSize(result.Path)
			if err != nil {
				logger.L().Error("Error getting file size of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			path := strings.TrimPrefix(result.Path, os.Getenv("HOST_ROOT"))
			return &mmtypes.GenericMalwareResult{
				Name:                 result.Description,
				Description:          result.Description,
				Path:                 path,
				SHA256Hash:           sha256hash,
				SHA1Hash:             sha1hash,
				MD5Hash:              md5hash,
				Size:                 humanize.IBytes(uint64(size)),
				IsPartOfImage:        true, // We don't have that enrichement in the open event.
				Namespace:            openEvent.GetNamespace(),
				PodName:              openEvent.GetPod(),
				ContainerName:        openEvent.GetContainer(),
				ContainerID:          openEvent.Runtime.ContainerID,
				ContainerImage:       openEvent.GetContainerImageName(),
				ContainerImageDigest: openEvent.Runtime.ContainerImageDigest,
			}
		}
	}

	return nil
}

// Ping ClamAV
func (c *ClamAVClient) Ping() error {
	return c.clamd.Ping()
}
