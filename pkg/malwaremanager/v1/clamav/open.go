package malwaremanager

import (
	"os"
	"slices"
	"strings"
	"time"

	"github.com/kubescape/node-agent/pkg/malwaremanager"
	malwaremanager2 "github.com/kubescape/node-agent/pkg/malwaremanager/v1/types"
	"github.com/kubescape/node-agent/pkg/utils"

	"github.com/armosec/armoapi-go/armotypes"
	"github.com/dustin/go-humanize"
	"github.com/dutchcoders/go-clamd"
	"github.com/kubescape/go-logger"
	"github.com/kubescape/go-logger/helpers"
)

func (c *ClamAVClient) handleOpenEvent(event utils.OpenEvent, containerPid uint32) malwaremanager.MalwareResult {
	if event == nil {
		return nil
	}

	// discard if it is an open for writing event
	if slices.Contains(event.GetFlags(), "O_WRONLY") {
		return nil
	}

	hostFilePath, err := utils.GetHostFilePathFromEvent(event, containerPid)
	if err != nil {
		logger.L().Warning("ClamAVClient.handleOpenEvent - getting host file path", helpers.Error(err))
		return nil
	}

	response, err := c.clamd.ScanFile(hostFilePath)
	if err != nil {
		logger.L().Warning("ClamAVClient.handleOpenEvent - scanning file", helpers.Error(err))
		return nil
	}

	for result := range response {
		if result.Status == clamd.RES_FOUND {
			// A malware was found, send an alert.
			size, err := utils.GetFileSize(result.Path)
			if err != nil {
				logger.L().Debug("ClamAVClient.handleOpenEvent - getting file size of %s", helpers.String("path", result.Path), helpers.Error(err))
			}

			sha1hash := ""
			md5hash := ""
			if size != 0 && size < maxFileSize {
				sha1hash, md5hash, err = utils.CalculateFileHashes(result.Path)
				if err != nil {
					logger.L().Debug("ClamAVClient.handleOpenEvent - getting file hashes", helpers.Error(err))
				}
			}
			path := strings.TrimPrefix(result.Path, os.Getenv("HOST_ROOT"))
			hostNetwork := event.GetHostNetwork()
			pid := event.GetPID()
			containerID := event.GetContainerID()

			return &malwaremanager2.GenericMalwareResult{
				BasicRuntimeAlert: armotypes.BaseRuntimeAlert{
					AlertName:      result.Description,
					InfectedPID:    pid,
					FixSuggestions: FixSuggestions,
					SHA1Hash:       sha1hash,
					MD5Hash:        md5hash,
					Severity:       10, // TODO: Get severity from api.
					Size:           humanize.IBytes(uint64(size)),
					Timestamp:      time.Unix(0, int64(event.GetTimestamp())),
				},
				RuntimeProcessDetails: armotypes.ProcessTree{
					ProcessTree: armotypes.Process{
						Comm: event.GetComm(),
						Path: path,
						Gid:  event.GetGid(),
						PID:  pid,
						Uid:  event.GetUid(),
					},
					ContainerID: containerID,
				},
				TriggerEvent: event,
				MalwareRuntimeAlert: armotypes.MalwareAlert{
					MalwareDescription: result.Description,
				},
				RuntimeAlertK8sDetails: armotypes.RuntimeAlertK8sDetails{
					ContainerID:   containerID,
					ContainerName: event.GetContainer(),
					Namespace:     event.GetNamespace(),
					PodName:       event.GetPod(),
					PodNamespace:  event.GetNamespace(),
					HostNetwork:   &hostNetwork,
					Image:         event.GetContainerImage(),
					ImageDigest:   event.GetContainerImageDigest(),
				},
			}
		}
	}

	return nil
}
