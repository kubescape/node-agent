package malwaremanager

import (
	"fmt"
	"node-agent/pkg/malwaremanager"
	malwaremanager2 "node-agent/pkg/malwaremanager/v1/types"
	"node-agent/pkg/utils"
	"os"
	"strings"
	"time"

	"github.com/armosec/armoapi-go/armotypes"
	"github.com/dustin/go-humanize"
	"github.com/dutchcoders/go-clamd"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/exec/types"
	"github.com/kubescape/go-logger"
	"github.com/kubescape/go-logger/helpers"
)

func (c *ClamAVClient) handleExecEvent(event *types.Event, containerPid uint32) malwaremanager.MalwareResult {
	if event == nil {
		return nil
	}

	hostFilePath, err := utils.GetHostFilePathFromEvent(event, containerPid)
	if err != nil {
		logger.L().Error("Error getting host file path", helpers.Error(err))
		return nil
	}

	response, err := c.clamd.ScanFile(hostFilePath)
	if err != nil {
		logger.L().Error("Error scanning file", helpers.Error(err))
		return nil
	}

	for result := range response {
		if result.Status == clamd.RES_FOUND {
			// A malware was found, send an alert.
			sha256hash, err := utils.CalculateSHA256FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			sha1hash, err := utils.CalculateSHA1FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			md5hash, err := utils.CalculateMD5FileHash(result.Path)
			if err != nil {
				logger.L().Error("Error calculating hash of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			size, err := utils.GetFileSize(result.Path)
			if err != nil {
				logger.L().Error("Error getting file size of %s", helpers.String("path", result.Path), helpers.Error(err))
			}
			path := strings.TrimPrefix(result.Path, os.Getenv("HOST_ROOT"))

			return &malwaremanager2.GenericMalwareResult{
				BasicRuntimeAlert: armotypes.BaseRuntimeAlert{
					AlertName:      result.Description,
					InfectedPID:    event.Pid,
					FixSuggestions: FixSuggestions,
					SHA1Hash:       sha1hash,
					SHA256Hash:     sha256hash,
					MD5Hash:        md5hash,
					Severity:       10, // TODO: Get severity from api.
					Size:           humanize.IBytes(uint64(size)),
					Timestamp:      time.Unix(int64(event.Timestamp), 0),
				},
				RuntimeProcessDetails: armotypes.ProcessTree{
					ProcessTree: armotypes.Process{
						Comm:       event.Comm,
						Path:       path,
						Gid:        &event.Gid,
						PID:        event.Pid,
						Uid:        &event.Uid,
						UpperLayer: event.UpperLayer,
						PPID:       event.Ppid,
						Pcomm:      event.Pcomm,
						Cwd:        event.Cwd,
						Hardlink:   event.ExePath,
						Cmdline:    fmt.Sprintf("%s %s", utils.GetExecPathFromEvent(event), utils.GetExecArgsFromEvent(event)),
					},
					ContainerID: event.Runtime.ContainerID,
				},
				TriggerEvent: event.Event,
				MalwareRuntimeAlert: armotypes.MalwareAlert{
					MalwareDescription: result.Description,
				},
				RuntimeAlertK8sDetails: armotypes.RuntimeAlertK8sDetails{
					ContainerID:   event.Runtime.ContainerID,
					ContainerName: event.K8s.ContainerName,
					Namespace:     event.GetNamespace(),
					PodName:       event.GetPod(),
					PodNamespace:  event.GetNamespace(),
					HostNetwork:   &event.K8s.HostNetwork,
					Image:         event.Runtime.ContainerImageName,
					ImageDigest:   event.Runtime.ContainerImageDigest,
				},
			}
		}
	}

	return nil
}
