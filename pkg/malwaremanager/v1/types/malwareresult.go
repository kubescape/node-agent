package malwaremanager

import (
	"node-agent/pkg/malwaremanager"

	apitypes "github.com/armosec/armoapi-go/armotypes"
	"github.com/armosec/utils-k8s-go/wlid"
	igtypes "github.com/inspektor-gadget/inspektor-gadget/pkg/types"
)

var _ malwaremanager.MalwareResult = (*GenericMalwareResult)(nil)

type GenericMalwareResult struct {
	BasicRuntimeAlert      apitypes.BaseRuntimeAlert
	RuntimeProcessDetails  apitypes.RuntimeAlertProcessDetails
	TriggerEvent           igtypes.Event
	MalwareRuntimeAlert    apitypes.MalwareAlert
	RuntimeAlertK8sDetails apitypes.RuntimeAlertK8sDetails
}

// Get Basic Runtime Alert
func (gmr *GenericMalwareResult) GetBasicRuntimeAlert() apitypes.BaseRuntimeAlert {
	return gmr.BasicRuntimeAlert
}

// Get Runtime Process Details
func (gmr *GenericMalwareResult) GetRuntimeProcessDetails() apitypes.RuntimeAlertProcessDetails {
	return gmr.RuntimeProcessDetails
}

// Get Trigger Event
func (gmr *GenericMalwareResult) GetTriggerEvent() igtypes.Event {
	return gmr.TriggerEvent
}

// Get Malware Description
func (gmr *GenericMalwareResult) GetMalwareRuntimeAlert() apitypes.MalwareAlert {
	return gmr.MalwareRuntimeAlert
}

// Get K8s Runtime Details
func (gmr *GenericMalwareResult) GetRuntimeAlertK8sDetails() apitypes.RuntimeAlertK8sDetails {
	return gmr.RuntimeAlertK8sDetails
}

// Set Workload Details
func (gmr *GenericMalwareResult) SetWorkloadDetails(workloadDetails string) {
	if workloadDetails == "" {
		return
	}

	cluster := wlid.GetClusterFromWlid(workloadDetails)

	gmr.RuntimeAlertK8sDetails.ClusterName = &cluster
	gmr.RuntimeAlertK8sDetails.WorkloadKind = wlid.GetKindFromWlid(workloadDetails)
	gmr.RuntimeAlertK8sDetails.WorkloadNamespace = wlid.GetNamespaceFromWlid(workloadDetails)
	gmr.RuntimeAlertK8sDetails.WorkloadName = wlid.GetNameFromWlid(workloadDetails)
}
