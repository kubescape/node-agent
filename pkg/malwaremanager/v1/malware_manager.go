package malwaremanager

import (
	"node-agent/pkg/malwaremanager"
	utils "node-agent/pkg/malwaremanager/utils"
	"node-agent/pkg/rulemanager/exporters"
	nautils "node-agent/pkg/utils"

	mapset "github.com/deckarep/golang-set/v2"
	tracerexectype "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/exec/types"
	traceropentype "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgets/trace/open/types"
)

const (
	MaxScannedFilesQueueSize = 1000
)

type MalwareManager struct {
	malwareScanners []MalwareScanner
	exporter        exporters.Exporter
	scannedFiles    mapset.Set[string]
}

var _ malwaremanager.MalwareManagerClient = (*MalwareManager)(nil)

func CreateMalwareManager(malwareScanners []MalwareScanner, exporter exporters.Exporter) (*MalwareManager, error) {
	return &MalwareManager{
		malwareScanners: malwareScanners,
		exporter:        exporter,
		scannedFiles:    mapset.NewSet[string](),
	}, nil
}

func (mm *MalwareManager) ReportFileExec(k8sContainerID string, event tracerexectype.Event) {
	for _, scanner := range mm.malwareScanners {
		if result := scanner.Scan(nautils.ExecveEventType, event); result != nil {
			mm.exporter.SendMalwareAlert(result)
		}
	}

	if mm.scannedFiles.Cardinality() <= MaxScannedFilesQueueSize {
		mm.scannedFiles.Add(utils.GetExecPathFromEvent(&event))
	}
}

func (mm *MalwareManager) ReportFileOpen(k8sContainerID string, event traceropentype.Event) {
	if mm.scannedFiles.Contains(event.FullPath) {
		return
	}

	for _, scanner := range mm.malwareScanners {
		if result := scanner.Scan(nautils.OpenEventType, event); result != nil {
			mm.exporter.SendMalwareAlert(result)
		}
	}

	if mm.scannedFiles.Cardinality() <= MaxScannedFilesQueueSize {
		mm.scannedFiles.Add(event.FullPath)
	}
}
