// Code generated by MockGen. DO NOT EDIT.
// Source: audit_manager_interface.go

// Package auditmanager is a generated GoMock package.
package auditmanager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/kubescape/node-agent/pkg/utils"
)

// MockAuditManagerClient is a mock of AuditManagerClient interface.
type MockAuditManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuditManagerClientMockRecorder
}

// MockAuditManagerClientMockRecorder is the mock recorder for MockAuditManagerClient.
type MockAuditManagerClientMockRecorder struct {
	mock *MockAuditManagerClient
}

// NewMockAuditManagerClient creates a new mock instance.
func NewMockAuditManagerClient(ctrl *gomock.Controller) *MockAuditManagerClient {
	mock := &MockAuditManagerClient{ctrl: ctrl}
	mock.recorder = &MockAuditManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditManagerClient) EXPECT() *MockAuditManagerClientMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockAuditManagerClient) GetStatus() AuditManagerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(AuditManagerStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAuditManagerClientMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAuditManagerClient)(nil).GetStatus))
}

// ReportEvent mocks base method.
func (m *MockAuditManagerClient) ReportEvent(eventType utils.EventType, event utils.K8sEvent, containerID, comm string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportEvent", eventType, event, containerID, comm)
}

// ReportEvent indicates an expected call of ReportEvent.
func (mr *MockAuditManagerClientMockRecorder) ReportEvent(eventType, event, containerID, comm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportEvent", reflect.TypeOf((*MockAuditManagerClient)(nil).ReportEvent), eventType, event, containerID, comm)
}

// Start mocks base method.
func (m *MockAuditManagerClient) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAuditManagerClientMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAuditManagerClient)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockAuditManagerClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockAuditManagerClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAuditManagerClient)(nil).Stop))
}
