package crd

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// GroupVersion is group version used to register these objects
var GroupVersion = schema.GroupVersion{Group: "kubescape.io", Version: "v1"}

// SchemeBuilder is used to add go types to the GroupVersionKind scheme
var SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)

// AddToScheme adds the types in this group-version to the given scheme.
var AddToScheme = SchemeBuilder.AddToScheme

func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(GroupVersion,
		&LinuxAuditRule{},
		&LinuxAuditRuleList{},
	)
	metav1.AddToGroupVersion(scheme, GroupVersion)
	return nil
}

// LinuxAuditRule represents the CRD for Linux audit rule management
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LinuxAuditRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AuditRuleSpec   `json:"spec,omitempty"`
	Status AuditRuleStatus `json:"status,omitempty"`
}

// AuditRuleSpec defines the desired state of AuditRule
type AuditRuleSpec struct {
	// Rules contains the list of audit rule definitions
	Rules []AuditRuleDefinition `json:"rules"`

	// NodeSelector specifies which nodes this rule should be applied to
	// If empty, applies to all nodes
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// RateLimit defines rate limiting for events generated by these rules
	RateLimit *RateLimit `json:"rateLimit,omitempty"`

	// Enabled controls whether these rules should be active
	// +kubebuilder:default=true
	Enabled bool `json:"enabled,omitempty"`
}

// AuditRuleDefinition defines a single audit rule
type AuditRuleDefinition struct {
	// Name is the unique name of this rule within the CRD
	Name string `json:"name"`

	// Description provides human-readable description of what this rule monitors
	Description string `json:"description,omitempty"`

	// Enabled controls whether this specific rule is active
	// +kubebuilder:default=true
	Enabled bool `json:"enabled,omitempty"`

	// Priority determines the order of rule application (lower = higher priority)
	// +kubebuilder:default=100
	Priority int `json:"priority,omitempty"`

	// Structured rule definitions (exactly one must be specified)
	FileWatch *FileWatchRule `json:"fileWatch,omitempty"`
	Syscall   *SyscallRule   `json:"syscall,omitempty"`
	Network   *NetworkRule   `json:"network,omitempty"`
	Process   *ProcessRule   `json:"process,omitempty"`

	// RawRule allows specifying audit rules in raw auditctl format
	// This is a fallback for complex rules not covered by structured types
	RawRule string `json:"rawRule,omitempty"`
}

// FileWatchRule defines file system monitoring rules
type FileWatchRule struct {
	// Paths to monitor (required)
	Paths []string `json:"paths"`

	// Permissions to monitor: read, write, attr, execute
	Permissions []string `json:"permissions"`

	// Recursive monitoring (not supported by audit subsystem, but kept for future)
	Recursive bool `json:"recursive,omitempty"`

	// Exclude patterns (basic glob patterns)
	Exclude []string `json:"exclude,omitempty"`

	// Key for identifying events from this rule
	Keys []string `json:"keys"`
}

// SyscallRule defines system call monitoring rules
type SyscallRule struct {
	// Syscalls to monitor (required)
	Syscalls []string `json:"syscalls"`

	// Architecture filters: b64, b32
	Architecture []string `json:"architecture,omitempty"`

	// Filters for syscall parameters
	Filters []SyscallFilter `json:"filters,omitempty"`

	// Action: always, never
	// +kubebuilder:default="always"
	Action string `json:"action,omitempty"`

	// List: task, exit, user, exclude
	// +kubebuilder:default="exit"
	List string `json:"list,omitempty"`

	// Key for identifying events from this rule (optional for some rule types)
	Keys []string `json:"keys,omitempty"`
}

// SyscallFilter defines filters for syscall rules
type SyscallFilter struct {
	// Field to filter on (pid, uid, gid, euid, egid, auid, exe, comm, dir, path, perm, arch, exit, success, a0-a15, etc.)
	Field string `json:"field"`

	// Operator: =, !=, <, >, <=, >=
	Operator string `json:"operator"`

	// Value to compare against
	Value string `json:"value"`
}

// NetworkRule defines network monitoring rules (future extension)
type NetworkRule struct {
	// Addresses to monitor
	Addresses []string `json:"addresses,omitempty"`

	// Ports to monitor
	Ports []int `json:"ports,omitempty"`

	// Protocols: tcp, udp, icmp
	Protocols []string `json:"protocols,omitempty"`

	// Direction: inbound, outbound, both
	Direction string `json:"direction,omitempty"`

	// Key for identifying events from this rule
	Keys []string `json:"keys"`
}

// ProcessRule defines process monitoring rules
type ProcessRule struct {
	// Executables to monitor (path patterns)
	Executables []string `json:"executables,omitempty"`

	// Command line argument patterns
	Arguments []string `json:"arguments,omitempty"`

	// Users to monitor
	Users []string `json:"users,omitempty"`

	// Groups to monitor
	Groups []string `json:"groups,omitempty"`

	// Additional filters
	Filters []SyscallFilter `json:"filters,omitempty"`

	// Key for identifying events from this rule
	Keys []string `json:"keys"`
}

// RateLimit defines rate limiting configuration
type RateLimit struct {
	// EventsPerSecond limits the number of events per second
	EventsPerSecond int `json:"eventsPerSecond,omitempty"`

	// BurstSize allows bursts up to this size
	BurstSize int `json:"burstSize,omitempty"`
}

// AuditRuleStatus defines the observed state of AuditRule
type AuditRuleStatus struct {
	// Conditions represent the latest available observations of the AuditRule's state
	Conditions []AuditRuleCondition `json:"conditions,omitempty"`

	// AppliedRules is the number of rules successfully applied to the kernel
	AppliedRules int `json:"appliedRules"`

	// FailedRules contains information about rules that failed to apply
	FailedRules []FailedRule `json:"failedRules,omitempty"`

	// LastUpdated is the timestamp when the rules were last updated
	LastUpdated *metav1.Time `json:"lastUpdated,omitempty"`

	// ObservedGeneration reflects the generation of the most recently observed AuditRule
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
}

// AuditRuleCondition describes the state of an AuditRule at a certain point
type AuditRuleCondition struct {
	// Type of audit rule condition
	Type AuditRuleConditionType `json:"type"`

	// Status of the condition: True, False, Unknown
	Status metav1.ConditionStatus `json:"status"`

	// LastTransitionTime is the last time the condition transitioned
	LastTransitionTime metav1.Time `json:"lastTransitionTime"`

	// Reason is a unique, one-word, CamelCase reason for the condition's last transition
	Reason string `json:"reason,omitempty"`

	// Message is a human-readable message indicating details about the transition
	Message string `json:"message,omitempty"`
}

// AuditRuleConditionType represents the type of condition
type AuditRuleConditionType string

const (
	// AuditRuleReady indicates that the audit rules are successfully applied
	AuditRuleReady AuditRuleConditionType = "Ready"

	// AuditRuleProgressing indicates that the audit rules are being processed
	AuditRuleProgressing AuditRuleConditionType = "Progressing"

	// AuditRuleFailed indicates that some audit rules failed to apply
	AuditRuleFailed AuditRuleConditionType = "Failed"
)

// FailedRule contains information about a rule that failed to apply
type FailedRule struct {
	// Name of the failed rule
	Name string `json:"name"`

	// Error message describing the failure
	Error string `json:"error"`

	// LastAttempt is when we last tried to apply this rule
	LastAttempt *metav1.Time `json:"lastAttempt,omitempty"`
}

// LinuxAuditRuleList contains a list of LinuxAuditRule
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LinuxAuditRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LinuxAuditRule `json:"items"`
}

// DeepCopyObject returns a generically typed copy of an object
func (in *LinuxAuditRule) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyObject returns a generically typed copy of an object
func (in *LinuxAuditRuleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// GetObjectKind returns the ObjectKind schema
func (in *LinuxAuditRule) GetObjectKind() schema.ObjectKind {
	return &in.TypeMeta
}

// GetObjectKind returns the ObjectKind schema
func (in *LinuxAuditRuleList) GetObjectKind() schema.ObjectKind {
	return &in.TypeMeta
}
