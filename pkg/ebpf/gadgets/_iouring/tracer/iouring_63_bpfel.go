// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type iouring_63Event struct {
	Timestamp uint64
	MntnsId   uint64
	Pid       uint32
	Tid       uint32
	Uid       uint32
	Gid       uint32
	Opcode    uint32
	Flags     uint32
	Comm      [16]uint8
}

// loadIouring_63 returns the embedded CollectionSpec for iouring_63.
func loadIouring_63() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Iouring_63Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iouring_63: %w", err)
	}

	return spec, err
}

// loadIouring_63Objects loads iouring_63 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iouring_63Objects
//	*iouring_63Programs
//	*iouring_63Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIouring_63Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIouring_63()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iouring_63Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouring_63Specs struct {
	iouring_63ProgramSpecs
	iouring_63MapSpecs
	iouring_63VariableSpecs
}

// iouring_63ProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouring_63ProgramSpecs struct {
	HandleSubmitReq *ebpf.ProgramSpec `ebpf:"handle_submit_req"`
}

// iouring_63MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouring_63MapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// iouring_63VariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouring_63VariableSpecs struct {
	GadgetFilterByMntns *ebpf.VariableSpec `ebpf:"gadget_filter_by_mntns"`
	Unusedevent         *ebpf.VariableSpec `ebpf:"unusedevent"`
}

// iouring_63Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIouring_63Objects or ebpf.CollectionSpec.LoadAndAssign.
type iouring_63Objects struct {
	iouring_63Programs
	iouring_63Maps
	iouring_63Variables
}

func (o *iouring_63Objects) Close() error {
	return _Iouring_63Close(
		&o.iouring_63Programs,
		&o.iouring_63Maps,
	)
}

// iouring_63Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIouring_63Objects or ebpf.CollectionSpec.LoadAndAssign.
type iouring_63Maps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *iouring_63Maps) Close() error {
	return _Iouring_63Close(
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
	)
}

// iouring_63Variables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadIouring_63Objects or ebpf.CollectionSpec.LoadAndAssign.
type iouring_63Variables struct {
	GadgetFilterByMntns *ebpf.Variable `ebpf:"gadget_filter_by_mntns"`
	Unusedevent         *ebpf.Variable `ebpf:"unusedevent"`
}

// iouring_63Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIouring_63Objects or ebpf.CollectionSpec.LoadAndAssign.
type iouring_63Programs struct {
	HandleSubmitReq *ebpf.Program `ebpf:"handle_submit_req"`
}

func (p *iouring_63Programs) Close() error {
	return _Iouring_63Close(
		p.HandleSubmitReq,
	)
}

func _Iouring_63Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed iouring_63_bpfel.o
var _Iouring_63Bytes []byte
