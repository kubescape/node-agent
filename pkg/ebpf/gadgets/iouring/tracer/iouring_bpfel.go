// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type iouringEvent struct {
	Timestamp uint64
	MntnsId   uint64
	Pid       uint32
	Tid       uint32
	Uid       uint32
	Gid       uint32
	Opcode    uint32
	Flags     uint32
	Comm      [16]uint8
}

// loadIouring returns the embedded CollectionSpec for iouring.
func loadIouring() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IouringBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iouring: %w", err)
	}

	return spec, err
}

// loadIouringObjects loads iouring and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iouringObjects
//	*iouringPrograms
//	*iouringMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIouringObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIouring()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iouringSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouringSpecs struct {
	iouringProgramSpecs
	iouringMapSpecs
	iouringVariableSpecs
}

// iouringProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouringProgramSpecs struct {
	HandleSubmitReq *ebpf.ProgramSpec `ebpf:"handle_submit_req"`
}

// iouringMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouringMapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// iouringVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iouringVariableSpecs struct {
	GadgetFilterByMntns *ebpf.VariableSpec `ebpf:"gadget_filter_by_mntns"`
	Unusedevent         *ebpf.VariableSpec `ebpf:"unusedevent"`
}

// iouringObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIouringObjects or ebpf.CollectionSpec.LoadAndAssign.
type iouringObjects struct {
	iouringPrograms
	iouringMaps
	iouringVariables
}

func (o *iouringObjects) Close() error {
	return _IouringClose(
		&o.iouringPrograms,
		&o.iouringMaps,
	)
}

// iouringMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIouringObjects or ebpf.CollectionSpec.LoadAndAssign.
type iouringMaps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *iouringMaps) Close() error {
	return _IouringClose(
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
	)
}

// iouringVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadIouringObjects or ebpf.CollectionSpec.LoadAndAssign.
type iouringVariables struct {
	GadgetFilterByMntns *ebpf.Variable `ebpf:"gadget_filter_by_mntns"`
	Unusedevent         *ebpf.Variable `ebpf:"unusedevent"`
}

// iouringPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIouringObjects or ebpf.CollectionSpec.LoadAndAssign.
type iouringPrograms struct {
	HandleSubmitReq *ebpf.Program `ebpf:"handle_submit_req"`
}

func (p *iouringPrograms) Close() error {
	return _IouringClose(
		p.HandleSubmitReq,
	)
}

func _IouringClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed iouring_bpfel.o
var _IouringBytes []byte
