// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ptraceEvent struct {
	Timestamp uint64
	MntnsId   uint64
	Pid       uint32
	Ppid      uint32
	Uid       uint32
	Gid       uint32
	Request   uint32
	Comm      [16]uint8
	Exepath   [512]uint8
	_         [4]byte
}

// loadPtrace returns the embedded CollectionSpec for ptrace.
func loadPtrace() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PtraceBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ptrace: %w", err)
	}

	return spec, err
}

// loadPtraceObjects loads ptrace and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ptraceObjects
//	*ptracePrograms
//	*ptraceMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPtraceObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPtrace()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ptraceSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ptraceSpecs struct {
	ptraceProgramSpecs
	ptraceMapSpecs
	ptraceVariableSpecs
}

// ptraceProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ptraceProgramSpecs struct {
	TraceEnterPtrace *ebpf.ProgramSpec `ebpf:"trace_enter_ptrace"`
}

// ptraceMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ptraceMapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// ptraceVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ptraceVariableSpecs struct {
	GadgetFilterByMntns *ebpf.VariableSpec `ebpf:"gadget_filter_by_mntns"`
}

// ptraceObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPtraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type ptraceObjects struct {
	ptracePrograms
	ptraceMaps
	ptraceVariables
}

func (o *ptraceObjects) Close() error {
	return _PtraceClose(
		&o.ptracePrograms,
		&o.ptraceMaps,
	)
}

// ptraceMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPtraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type ptraceMaps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *ptraceMaps) Close() error {
	return _PtraceClose(
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
	)
}

// ptraceVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadPtraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type ptraceVariables struct {
	GadgetFilterByMntns *ebpf.Variable `ebpf:"gadget_filter_by_mntns"`
}

// ptracePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPtraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type ptracePrograms struct {
	TraceEnterPtrace *ebpf.Program `ebpf:"trace_enter_ptrace"`
}

func (p *ptracePrograms) Close() error {
	return _PtraceClose(
		p.TraceEnterPtrace,
	)
}

func _PtraceClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ptrace_bpfel.o
var _PtraceBytes []byte
