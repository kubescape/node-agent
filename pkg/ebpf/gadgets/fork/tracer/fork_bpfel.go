// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type forkEvent struct {
	Timestamp  uint64
	MntnsId    uint64
	Pid        uint32
	Tid        uint32
	Ppid       uint32
	Uid        uint32
	Gid        uint32
	UpperLayer bool
	Comm       [16]uint8
	Exepath    [512]uint8
	_          [3]byte
	ChildPid   uint32
	ChildTid   uint32
}

// loadFork returns the embedded CollectionSpec for fork.
func loadFork() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ForkBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load fork: %w", err)
	}

	return spec, err
}

// loadForkObjects loads fork and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*forkObjects
//	*forkPrograms
//	*forkMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadForkObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFork()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// forkSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type forkSpecs struct {
	forkProgramSpecs
	forkMapSpecs
	forkVariableSpecs
}

// forkProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type forkProgramSpecs struct {
	TracepointSchedFork *ebpf.ProgramSpec `ebpf:"tracepoint__sched_fork"`
}

// forkMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type forkMapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// forkVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type forkVariableSpecs struct {
	GadgetFilterByMntns *ebpf.VariableSpec `ebpf:"gadget_filter_by_mntns"`
	TargUid             *ebpf.VariableSpec `ebpf:"targ_uid"`
	Unusedevent         *ebpf.VariableSpec `ebpf:"unusedevent"`
}

// forkObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadForkObjects or ebpf.CollectionSpec.LoadAndAssign.
type forkObjects struct {
	forkPrograms
	forkMaps
	forkVariables
}

func (o *forkObjects) Close() error {
	return _ForkClose(
		&o.forkPrograms,
		&o.forkMaps,
	)
}

// forkMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadForkObjects or ebpf.CollectionSpec.LoadAndAssign.
type forkMaps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *forkMaps) Close() error {
	return _ForkClose(
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
	)
}

// forkVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadForkObjects or ebpf.CollectionSpec.LoadAndAssign.
type forkVariables struct {
	GadgetFilterByMntns *ebpf.Variable `ebpf:"gadget_filter_by_mntns"`
	TargUid             *ebpf.Variable `ebpf:"targ_uid"`
	Unusedevent         *ebpf.Variable `ebpf:"unusedevent"`
}

// forkPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadForkObjects or ebpf.CollectionSpec.LoadAndAssign.
type forkPrograms struct {
	TracepointSchedFork *ebpf.Program `ebpf:"tracepoint__sched_fork"`
}

func (p *forkPrograms) Close() error {
	return _ForkClose(
		p.TracepointSchedFork,
	)
}

func _ForkClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed fork_bpfel.o
var _ForkBytes []byte
