// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type exitEvent struct {
	Timestamp  uint64
	MntnsId    uint64
	Pid        uint32
	Tid        uint32
	Ppid       uint32
	Uid        uint32
	Gid        uint32
	UpperLayer bool
	_          [3]byte
	ExitCode   uint32
	ExitSignal uint32
}

// loadExit returns the embedded CollectionSpec for exit.
func loadExit() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExitBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load exit: %w", err)
	}

	return spec, err
}

// loadExitObjects loads exit and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*exitObjects
//	*exitPrograms
//	*exitMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExitObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExit()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// exitSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitSpecs struct {
	exitProgramSpecs
	exitMapSpecs
	exitVariableSpecs
}

// exitProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitProgramSpecs struct {
	TracepointSchedExit *ebpf.ProgramSpec `ebpf:"tracepoint__sched_exit"`
}

// exitMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitMapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// exitVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitVariableSpecs struct {
	GadgetFilterByMntns *ebpf.VariableSpec `ebpf:"gadget_filter_by_mntns"`
	Unusedevent         *ebpf.VariableSpec `ebpf:"unusedevent"`
}

// exitObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExitObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitObjects struct {
	exitPrograms
	exitMaps
	exitVariables
}

func (o *exitObjects) Close() error {
	return _ExitClose(
		&o.exitPrograms,
		&o.exitMaps,
	)
}

// exitMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExitObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitMaps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *exitMaps) Close() error {
	return _ExitClose(
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
	)
}

// exitVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadExitObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitVariables struct {
	GadgetFilterByMntns *ebpf.Variable `ebpf:"gadget_filter_by_mntns"`
	Unusedevent         *ebpf.Variable `ebpf:"unusedevent"`
}

// exitPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExitObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitPrograms struct {
	TracepointSchedExit *ebpf.Program `ebpf:"tracepoint__sched_exit"`
}

func (p *exitPrograms) Close() error {
	return _ExitClose(
		p.TracepointSchedExit,
	)
}

func _ExitClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed exit_bpfel.o
var _ExitBytes []byte
