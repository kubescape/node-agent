// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hardlinkEvent struct {
	Timestamp  uint64
	MntnsId    uint64
	Pid        uint32
	Ppid       uint32
	Uid        uint32
	Gid        uint32
	UpperLayer bool
	Comm       [16]uint8
	Exepath    [4096]uint8
	Oldpath    [4096]uint8
	Newpath    [4096]uint8
	_          [7]byte
}

// loadHardlink returns the embedded CollectionSpec for hardlink.
func loadHardlink() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HardlinkBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hardlink: %w", err)
	}

	return spec, err
}

// loadHardlinkObjects loads hardlink and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hardlinkObjects
//	*hardlinkPrograms
//	*hardlinkMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHardlinkObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHardlink()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hardlinkSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hardlinkSpecs struct {
	hardlinkProgramSpecs
	hardlinkMapSpecs
}

// hardlinkSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hardlinkProgramSpecs struct {
	TracepointSysLink   *ebpf.ProgramSpec `ebpf:"tracepoint__sys_link"`
	TracepointSysLinkat *ebpf.ProgramSpec `ebpf:"tracepoint__sys_linkat"`
}

// hardlinkMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hardlinkMapSpecs struct {
	Bufs                 *ebpf.MapSpec `ebpf:"bufs"`
	EmptyEvent           *ebpf.MapSpec `ebpf:"empty_event"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetHeap           *ebpf.MapSpec `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
}

// hardlinkObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHardlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type hardlinkObjects struct {
	hardlinkPrograms
	hardlinkMaps
}

func (o *hardlinkObjects) Close() error {
	return _HardlinkClose(
		&o.hardlinkPrograms,
		&o.hardlinkMaps,
	)
}

// hardlinkMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHardlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type hardlinkMaps struct {
	Bufs                 *ebpf.Map `ebpf:"bufs"`
	EmptyEvent           *ebpf.Map `ebpf:"empty_event"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetHeap           *ebpf.Map `ebpf:"gadget_heap"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
}

func (m *hardlinkMaps) Close() error {
	return _HardlinkClose(
		m.Bufs,
		m.EmptyEvent,
		m.Events,
		m.GadgetHeap,
		m.GadgetMntnsFilterMap,
	)
}

// hardlinkPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHardlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type hardlinkPrograms struct {
	TracepointSysLink   *ebpf.Program `ebpf:"tracepoint__sys_link"`
	TracepointSysLinkat *ebpf.Program `ebpf:"tracepoint__sys_linkat"`
}

func (p *hardlinkPrograms) Close() error {
	return _HardlinkClose(
		p.TracepointSysLink,
		p.TracepointSysLinkat,
	)
}

func _HardlinkClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hardlink_bpfel.o
var _HardlinkBytes []byte
