name: Node Agent Component Test

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  component-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [
          "TestBasicAlertTest",
          "TestAllAlertsFromMaliciousApp",
        ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Login to Quay.io
      uses: docker/login-action@v3
      with:
        registry: quay.io/kubescape
        username: ${{ secrets.QUAYIO_REGISTRY_USERNAME }}
        password: ${{ secrets.QUAYIO_REGISTRY_PASSWORD }}

    - name: Build the Image and Push to Quay.io
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        export IMAGE_TAG=test-${COMMIT_HASH}
        export IMAGE_REPO=quay.io/kubescape/node-agent
        echo ${IMAGE_REPO} > test-image-repo.txt
        export IMAGE_NAME=quay.io/kubescape/node-agent:${IMAGE_TAG}
        echo "${IMAGE_TAG}" > test-image-tag.txt
        make docker-build TAG=${IMAGE_TAG} IMAGE=${IMAGE_REPO} && make docker-push TAG=${IMAGE_TAG} IMAGE=${IMAGE_REPO}

    - name: Set up Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-$(uname)-amd64
        chmod +x ./kind
        ./kind create cluster
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Install Helm and Kubectl
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        sudo ./get_helm.sh

    - name: Install Prometheus and Node Exporter
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --set grafana.enabled=false --namespace monitoring --create-namespace --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false,prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false --wait --timeout 5m
        # Check that the prometheus pod is running
        kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s

    - name: Install Node Agent Chart
      run: |
        helm upgrade --install kubescape ./tests/chart --set clusterName=`kubectl config current-context` --set nodeAgent.image.tag=$(cat test-image-tag.txt) --set nodeAgent.image.repository=$(cat test-image-repo.txt) -n kubescape --create-namespace --wait --timeout 5m --debug
        # Check that the node-agent pod is running
        kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=node-agent -n kubescape --timeout=300s
        sleep 5
  
    - name: Run Port Forwarding
      run: |
        ./tests/scripts/port-forward.sh
  
    - name: Set up Go
      env:
        CGO_ENABLED: 0
      uses: actions/setup-go@v4
      with:
        go-version: "1.21"

    - name: Run test
      run: |
        cd tests && go test -v ./... -run ${{ matrix.test }} --timeout=20m --tags=integration

    - name: Upload plot images
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Performance plots
        path: "*.png"

    - name: Upload pprof files
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Pprof files
        path: "*.pprof"

    - name: Comment on PR
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          const comment = `:sparkles: Artifacts are available [here](${artifactUrl}).`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
