apiVersion: kubescape.io/v1
kind: Rules
metadata:
  name: kubescape-rules
  namespace: kubescape
  annotations:
    kubescape.io/namespace: kubescape
  labels:
    app: kubescape
spec:
  rules:
  - name: "Unexpected process launched"
    enabled: true
    id: "R0001"
    description: "Detects unexpected process launches that are not in the baseline"
    expressions:
      message: "'Unexpected process launched: ' + data.event.Comm + ' with PID ' + string(data.event.Pid)"
      unique_id: "data.event.Comm + '_' + data.event.ExePath"
      rule_expression:
        - event_type: "exec"
          expression: "!ap.was_executed(data.event.Event.CommonData.Runtime.ContainerID, parse.get_exec_path(data.event.Args, data.event.Comm))"
    profile_dependency: 0
    severity: 1
    support_policy: false
    tags:
      - "anomaly"
      - "process"
      - "exec"
      - "applicationprofile"
  - name: "Unexpected file access"
    enabled: true
    id: "R0002"
    description: "Detects unexpected file access that is not in the baseline"
    expressions:
      message: "'Unexpected file access detected: ' + data.event.Comm + ' with PID ' + string(data.event.Pid) + ' to ' + data.event.FullPath"
      unique_id: "data.event.Comm + '_' + data.event.FullPath"
      rule_expression:
        - event_type: "open"
          expression: "!ap.was_path_opened(data.event.Event.CommonData.Runtime.ContainerID, data.event.FullPath) && !(data.event.FullPath.startsWith('/proc') || \n  data.event.FullPath.startsWith('/run/secrets/kubernetes.io/serviceaccount') || \n  data.event.FullPath.startsWith('/var/run/secrets/kubernetes.io/serviceaccount') || \n  data.event.FullPath.startsWith('/tmp')) &&\n(data.event.FullPath.startsWith('/etc') || \n data.event.FullPath.startsWith('/var/spool/cron/') || \n data.event.FullPath.startsWith('/var/log/') || \n data.event.FullPath.startsWith('/var/run/') || \n data.event.FullPath.startsWith('/dev/shm/') || \n data.event.FullPath.startsWith('/run/') || \n data.event.FullPath.startsWith('/var/www/') || \n data.event.FullPath.startsWith('/var/lib/docker/') || \n data.event.FullPath.startsWith('/opt/') || \n data.event.FullPath.startsWith('/usr/local/') || \n data.event.FullPath.startsWith('/app/') || \n data.event.FullPath.startsWith('/.dockerenv') || \n data.event.FullPath.startsWith('/proc/self/environ') || \n data.event.FullPath.startsWith('/var/lib/kubelet/') || \n data.event.FullPath.startsWith('/etc/cni/net.d/') || \n data.event.FullPath.startsWith('/var/run/secrets/kubernetes.io/') || \n data.event.FullPath.startsWith('/var/run/secrets/kubernetes.io/serviceaccount/') || \n data.event.FullPath.startsWith('/run/containerd/') || \n data.event.FullPath.startsWith('/run/flannel/') || \n data.event.FullPath.startsWith('/run/calico/'))\n"
    profile_dependency: 0
    severity: 1
    support_policy: false
    tags:
      - "anomaly"
      - "file"
      - "open"
      - "applicationprofile"
  - name: "Unexpected system call"
    enabled: true
    id: "R0003"
    description: "Detects unexpected system calls that are not whitelisted by application profile"
    expressions:
      message: "'Unexpected system call detected: ' + data.event.SyscallName + ' with PID ' + string(data.event.Pid)"
      unique_id: "data.event.SyscallName"
      rule_expression:
        - event_type: "syscall"
          expression: "!ap.was_syscall_used(data.event.Event.CommonData.Runtime.ContainerID, data.event.SyscallName)"
    profile_dependency: 0
    severity: 1
    support_policy: false
    tags:
      - "anomaly"
      - "syscall"
      - "applicationprofile"
  - name: "Unexpected capability used"
    enabled: true
    id: "R0004"
    description: "Detects unexpected capabilities that are not whitelisted by application profile"
    expressions:
      message: "'Unexpected capability used: ' + data.event.CapName + ' in syscall ' + data.event.Syscall + ' with PID ' + string(data.event.Pid)"
      unique_id: "data.event.Comm + '_' + data.event.CapName"
      rule_expression:
        - event_type: "capabilities"
          expression: "!ap.was_capability_used(data.event.Event.CommonData.Runtime.ContainerID, data.event.CapName)"
    profile_dependency: 0
    severity: 1
    support_policy: false
    tags:
      - "anomaly"
      - "capabilities"
      - "applicationprofile"
  - name: "Unexpected domain request"
    enabled: true
    id: "R0005"
    description: "Detecting unexpected domain requests that are not whitelisted by application profile."
    expressions:
      message: "'Unexpected domain communication: ' + data.event.DNSName + ' from: ' + data.event.Event.CommonData.K8s.BasicK8sMetadata.ContainerName"
      unique_id: "data.event.Comm + '_' + data.event.DNSName"
      rule_expression:
        - event_type: "dns"
          expression: "!nn.is_domain_in_egress(data.event.Event.CommonData.Runtime.ContainerID, data.event.DNSName) && !data.event.DNSName.endsWith('.svc.cluster.local.')"
    profile_dependency: 0
    severity: 1
    support_policy: false
    tags:
      - "dns"
      - "anomaly"
      - "networkprofile"
  - name: "Unexpected Service Account Token Access"
    enabled: true
    id: "R0006"
    description: "Detecting unexpected access to service account token."
    expressions:
      message: "'Unexpected access to service account token: ' + data.event.FullPath + ' with flags: ' + data.event.Flags.join(',')"
      unique_id: "data.event.Comm"
      rule_expression:
        - event_type: "open"
          expression: "((data.event.FullPath.startsWith('/run/secrets/kubernetes.io/serviceaccount') && data.event.FullPath.endsWith('/token')) || \n (data.event.FullPath.startsWith('/var/run/secrets/kubernetes.io/serviceaccount') && data.event.FullPath.endsWith('/token')) ||\n (data.event.FullPath.startsWith('/run/secrets/eks.amazonaws.com/serviceaccount') && data.event.FullPath.endsWith('/token')) ||\n (data.event.FullPath.startsWith('/var/run/secrets/eks.amazonaws.com/serviceaccount') && data.event.FullPath.endsWith('/token'))) &&\n!ap.was_path_opened_with_prefix(data.event.Event.CommonData.Runtime.ContainerID, '/run/secrets/kubernetes.io/serviceaccount') && !ap.was_path_opened_with_prefix(data.event.Event.CommonData.Runtime.ContainerID, '/var/run/secrets/kubernetes.io/serviceaccount') && !ap.was_path_opened_with_prefix(data.event.Event.CommonData.Runtime.ContainerID, '/run/secrets/eks.amazonaws.com/serviceaccount') && !ap.was_path_opened_with_prefix(data.event.Event.CommonData.Runtime.ContainerID, '/var/run/secrets/eks.amazonaws.com/serviceaccount')\n"
    profile_dependency: 1
    severity: 5
    support_policy: false
    tags:
      - "anomaly"
      - "serviceaccount"
      - "applicationprofile"
  - name: "Kubernetes Client Executed"
    enabled: true
    id: "R0007"
    description: "Detecting execution of kubernetes client"
    expressions:
      message: "'Kubernetes client ' + data.event.Comm + ' was executed with PID ' + string(data.event.Pid)"
      unique_id: "data.event.Comm + '_' + data.event.Pcomm"
      rule_expression:
        - event_type: "exec"
          expression: "(data.event.Comm == 'kubectl' || data.event.ExePath.endsWith('/kubectl')) && !ap.was_executed(data.event.Event.CommonData.Runtime.ContainerID, parse.get_exec_path(data.event.Args, data.event.Comm))"
        - event_type: "network"
          expression: "data.event.PktType == 'OUTGOING' && k8s.is_api_server_address(data.event.DstEndpoint.Addr) && !nn.was_address_in_egress(data.event.Event.CommonData.Runtime.ContainerID, data.event.DstEndpoint.Addr)"
    profile_dependency: 0
    severity: 5 # Medium
    support_policy: false
    tags:
      - "exec"
      - "network"
      - "anomaly"
      - "applicationprofile"
  - name: "Read Environment Variables from procfs"
    enabled: true
    id: "R0008"
    description: "Detecting reading environment variables from procfs."
    expressions:
      message: "'Reading environment variables from procfs: ' + data.event.FullPath + ' by process ' + data.event.Comm"
      unique_id: "data.event.Comm + '_' + data.event.FullPath"
      rule_expression:
        - event_type: "open"
          expression: >
            data.event.FullPath.startsWith('/proc/') &&  data.event.FullPath.endsWith('/environ') && !ap.was_path_opened_with_suffix(data.event.Event.CommonData.Runtime.ContainerID, '/environ')
    
    profile_dependency: 0 # Required
    severity: 3
    support_policy: false
    tags:
      - "anomaly"
      - "procfs"
      - "environment"
      - "applicationprofile"
  - name: "eBPF Program Load"
    enabled: true
    id: "R0009"
    description: "Detecting eBPF program load."
    expressions:
      message: "'bpf system call executed in ' + data.event.Event.CommonData.K8s.BasicK8sMetadata.ContainerName"
      unique_id: "data.event.Comm + '_' + data.event.SyscallName"
      rule_expression:
        - event_type: "syscall"
          expression: "data.event.SyscallName == 'bpf' && !ap.was_syscall_used(data.event.Event.CommonData.Runtime.ContainerID, data.event.SyscallName)"
    profile_dependency: 1
    severity: 5
    support_policy: false
    tags:
      - "syscall"
      - "ebpf"
      - "applicationprofile"
  - name: "Unexpected Sensitive File Access"
    enabled: true
    id: "R0010"
    description: "Detecting access to sensitive files."
    expressions:
      message: "'Unexpected sensitive file access: ' + data.event.FullPath + ' by process ' + data.event.Comm"
      unique_id: "data.event.Comm + '_' + data.event.FullPath"
      rule_expression:
        - event_type: "open"
          expression: "data.event.FullPath.startsWith('/etc/shadow') && !ap.was_path_opened(data.event.Event.CommonData.Runtime.ContainerID, data.event.FullPath)"
    profile_dependency: 1
    severity: 5
    support_policy: false
    tags:
      - "files"
      - "anomaly"
      - "applicationprofile"
  - name: "Unexpected Egress Network Traffic"
    enabled: true
    id: "R0011"
    description: "Detecting unexpected egress network traffic that is not whitelisted by application profile."
    expressions:
      message: "'Unexpected egress network communication to: ' + data.event.DstEndpoint.Addr + ':' + string(data.event.Port) + ' using ' + data.event.Proto + ' from: ' + data.event.Event.CommonData.K8s.BasicK8sMetadata.ContainerName"
      unique_id: "data.event.DstEndpoint.Addr + '_' + string(data.event.Port) + '_' + data.event.Proto"
      rule_expression:
        - event_type: "network"
          expression: "data.event.PktType == 'OUTGOING' && !net.is_private_ip(data.event.DstEndpoint.Addr) && !nn.was_address_in_egress(data.event.Event.CommonData.Runtime.ContainerID, data.event.DstEndpoint.Addr)"
    profile_dependency: 0
    severity: 5 # Medium
    support_policy: false
    tags:
      - "whitelisted"
      - "network"
      - "anomaly"
      - "networkprofile"
  - name: "Exec from malicious source"
    enabled: true
    id: "R1000"
    description: "Detecting exec calls that are from malicious source like: /dev/shm, /proc/self"
    expressions:
      message: "'Execution from malicious source: ' + data.event.ExePath + ' in directory ' + data.event.Cwd"
      unique_id: "data.event.Comm + '_' + data.event.ExePath + '_' + data.event.Pcomm"
      rule_expression:
        - event_type: "exec"
          expression: "(data.event.ExePath == '/dev/shm' || data.event.ExePath.startsWith('/dev/shm/')) || (data.event.Cwd == '/dev/shm' || data.event.Cwd.startsWith('/dev/shm/') ||  (parse.get_exec_path(data.event.Args, data.event.Comm).startsWith('/dev/shm/'))) \n"
    profile_dependency: 2
    severity: 8
    support_policy: true
    tags:
      - "exec"
      - "signature"
      - "malicious"
  - name: "Exec Binary Not In Base Image"
    enabled: true
    id: "R1001"
    description: "Detecting exec calls of binaries that are not included in the base image"
    expressions:
      message: "'Process (' + data.event.Comm + ') was executed and is not part of the image'"
      unique_id: "data.event.Comm + '_' + data.event.ExePath + '_' + data.event.Pcomm"
      rule_expression:
        - event_type: "exec"
          expression: >
            (data.event.UpperLayer == true ||
    
             data.event.PupperLayer == true) &&
            !ap.was_executed(data.event.Event.CommonData.Runtime.ContainerID, parse.get_exec_path(data.event.Args, data.event.Comm))
    
    profile_dependency: 1
    severity: 8
    support_policy: false
    tags:
      - "exec"
      - "malicious"
      - "binary"
      - "base image"
      - "applicationprofile"
  - name: "Kernel Module Load"
    enabled: true
    id: "R1002"
    description: "Detecting Kernel Module Load."
    expressions:
      message: "'Kernel module load syscall (' + data.event.SyscallName + ') was called'"
      unique_id: "data.event.SyscallName"
      rule_expression:
        - event_type: "syscall"
          expression: >
            data.event.SyscallName == 'init_module' || data.event.SyscallName == 'finit_module'
    
    profile_dependency: 2
    severity: 10
    support_policy: false
    tags:
      - "syscall"
      - "kernel"
      - "module"
      - "load"
  - name: "Malicious SSH Connection"
    enabled: true
    id: "R1003"
    description: "Detecting ssh connection to disallowed port"
    expressions:
      message: "'Malicious SSH connection attempt to ' + data.event.DstIP + ':' + string(data.event.DstPort)"
      unique_id: "data.event.Comm + '_' + data.event.DstIP + '_' + string(data.event.DstPort)"
      rule_expression:
        - event_type: "ssh"
          expression: "data.event.SrcPort >= 32768 && data.event.SrcPort <= 60999 && !(data.event.DstPort in [22, 2022]) && !nn.was_address_in_egress(data.event.Event.CommonData.Runtime.ContainerID, data.event.DstIP)"
    profile_dependency: 1
    severity: 5
    support_policy: false
    tags:
      - "ssh"
      - "connection"
      - "port"
      - "malicious"
      - "networkprofile"
  - name: "Exec from mount"
    enabled: true
    id: "R1004"
    description: "Detecting exec calls from mounted paths."
    expressions:
      message: "'Process (' + data.event.Comm + ') was executed from a mounted path'"
      unique_id: "data.event.Comm + '_' + data.event.ExePath + '_' + data.event.Pcomm"
      rule_expression:
        - event_type: "exec"
          expression: "!ap.was_executed(data.event.Event.CommonData.Runtime.ContainerID, parse.get_exec_path(data.event.Args, data.event.Comm)) && k8s.get_container_mount_paths(data.event.Event.CommonData.K8s.BasicK8sMetadata.Namespace, data.event.Event.CommonData.K8s.BasicK8sMetadata.PodName, data.event.Event.CommonData.K8s.BasicK8sMetadata.ContainerName).exists(mount, data.event.ExePath.startsWith(mount) || parse.get_exec_path(data.event.Args, data.event.Comm).startsWith(mount))"
    profile_dependency: 1
    severity: 5
    support_policy: false
    tags:
      - "exec"
      - "mount"
      - "applicationprofile"
  - name: "Fileless Execution"
    enabled: true
    id: "R1005"
    description: "Detecting Fileless Execution"
    expressions:
      message: "'Fileless execution detected: exec call \"' + data.event.Comm + '\" is from a malicious source'"
      unique_id: "data.event.Comm + '_' + data.event.ExePath + '_' + data.event.Pcomm"
      rule_expression:
        - event_type: "exec"
          expression: "data.event.ExePath.contains('memfd') || data.event.ExePath.startsWith('/proc/self/fd') || data.event.ExePath.matches('/proc/[0-9]+/fd/[0-9]+')"
    profile_dependency: 2
    severity: 8
    support_policy: false
    tags:
      - "fileless"
      - "execution"
      - "malicious"
  - name: "Unshare System Call usage"
    enabled: true
    id: "R1006"
    description: "Detecting Unshare System Call usage, which can be used to escape container."
    expressions:
      message: "'Unshare system call detected: ' + data.event.SyscallName + ' with PID ' + string(data.event.Pid)"
      unique_id: "data.event.SyscallName"
      rule_expression:
        - event_type: "syscall"
          expression: "data.event.SyscallName == 'unshare' && !ap.was_syscall_used(data.event.Event.CommonData.Runtime.ContainerID, data.event.SyscallName)"
    profile_dependency: 2
    severity: 5
    support_policy: false
    tags:
      - "syscall"
      - "escape"
      - "unshare"
      - "anomaly"
      - "applicationprofile"
  - name: "XMR Crypto Mining Detection"
    enabled: true
    id: "R1007"
    description: "Detecting XMR Crypto Miners by randomx algorithm usage."
    expressions:
      message: "'XMR Crypto Miner process: (' + data.event.ExePath + ') executed'"
      unique_id: "data.event.ExePath + '_' + data.event.Comm"
      rule_expression:
        - event_type: "randomx"
          expression: "true"
    profile_dependency: 2
    severity: 10
    support_policy: false
    tags:
      - "crypto"
      - "miners"
      - "malicious"
  - name: "Crypto Mining Domain Communication"
    enabled: true
    id: "R1008"
    description: "Detecting Crypto miners communication by domain"
    expressions:
      message: "'Communication with a known crypto mining domain: ' + data.event.DNSName"
      unique_id: "data.event.DNSName + '_' + data.event.Comm"
      rule_expression:
        - event_type: "dns"
          expression: "data.event.DNSName in ['2cryptocalc.com.', '2miners.com.', 'antpool.com.', 'asia1.ethpool.org.', 'bohemianpool.com.', 'botbox.dev.', 'btm.antpool.com.', 'c3pool.com.', 'c4pool.org.', 'ca.minexmr.com.', 'cn.stratum.slushpool.com.', 'dash.antpool.com.', 'data.miningpoolstats.stream.', 'de.minexmr.com.', 'eth-ar.dwarfpool.com.', 'eth-asia.dwarfpool.com.', 'eth-asia1.nanopool.org.', 'eth-au.dwarfpool.com.', 'eth-au1.nanopool.org.', 'eth-br.dwarfpool.com.', 'eth-cn.dwarfpool.com.', 'eth-cn2.dwarfpool.com.', 'eth-eu.dwarfpool.com.', 'eth-eu1.nanopool.org.', 'eth-eu2.nanopool.org.', 'eth-hk.dwarfpool.com.', 'eth-jp1.nanopool.org.', 'eth-ru.dwarfpool.com.', 'eth-ru2.dwarfpool.com.', 'eth-sg.dwarfpool.com.', 'eth-us-east1.nanopool.org.', 'eth-us-west1.nanopool.org.', 'eth-us.dwarfpool.com.', 'eth-us2.dwarfpool.com.', 'eth.antpool.com.', 'eu.stratum.slushpool.com.', 'eu1.ethermine.org.', 'eu1.ethpool.org.', 'fastpool.xyz.', 'fr.minexmr.com.', 'kriptokyng.com.', 'mine.moneropool.com.', 'mine.xmrpool.net.', 'miningmadness.com.', 'monero.cedric-crispin.com.', 'monero.crypto-pool.fr.', 'monero.fairhash.org.', 'monero.hashvault.pro.', 'monero.herominers.com.', 'monerod.org.', 'monerohash.com.', 'moneroocean.stream.', 'monerop.com.', 'multi-pools.com.', 'p2pool.io.', 'pool.kryptex.com.', 'pool.minexmr.com.', 'pool.monero.hashvault.pro.', 'pool.rplant.xyz.', 'pool.supportxmr.com.', 'pool.xmr.pt.', 'prohashing.com.', 'rx.unmineable.com.', 'sg.minexmr.com.', 'sg.stratum.slushpool.com.', 'skypool.org.', 'solo-xmr.2miners.com.', 'ss.antpool.com.', 'stratum-btm.antpool.com.', 'stratum-dash.antpool.com.', 'stratum-eth.antpool.com.', 'stratum-ltc.antpool.com.', 'stratum-xmc.antpool.com.', 'stratum-zec.antpool.com.', 'stratum.antpool.com.', 'supportxmr.com.', 'trustpool.cc.', 'us-east.stratum.slushpool.com.', 'us1.ethermine.org.', 'us1.ethpool.org.', 'us2.ethermine.org.', 'us2.ethpool.org.', 'web.xmrpool.eu.', 'www.domajorpool.com.', 'www.dxpool.com.', 'www.mining-dutch.nl.', 'xmc.antpool.com.', 'xmr-asia1.nanopool.org.', 'xmr-au1.nanopool.org.', 'xmr-eu1.nanopool.org.', 'xmr-eu2.nanopool.org.', 'xmr-jp1.nanopool.org.', 'xmr-us-east1.nanopool.org.', 'xmr-us-west1.nanopool.org.', 'xmr.2miners.com.', 'xmr.crypto-pool.fr.', 'xmr.gntl.uk.', 'xmr.nanopool.org.', 'xmr.pool-pay.com.', 'xmr.pool.minergate.com.', 'xmr.solopool.org.', 'xmr.volt-mine.com.', 'xmr.zeropool.io.', 'zec.antpool.com.', 'zergpool.com.', 'auto.c3pool.org.', 'us.monero.herominers.com.']"
    profile_dependency: 2
    severity: 10
    support_policy: false
    tags:
      - "network"
      - "crypto"
      - "miners"
      - "malicious"
      - "dns"
  - name: "Crypto Mining Related Port Communication"
    enabled: true
    id: "R1009"
    description: "Detecting Crypto Miners by suspicious port usage."
    expressions:
      message: "'Detected crypto mining related port communication on port ' + string(data.event.Port) + ' to ' + data.event.DstEndpoint.Addr + ' with protocol ' + data.event.Proto"
      unique_id: "data.event.Comm + '_' + string(data.event.Port)"
      rule_expression:
        - event_type: "network"
          expression: "data.event.Proto == 'TCP' && data.event.PktType == 'OUTGOING' && data.event.Port in [3333, 45700] && !nn.was_address_in_egress(data.event.Event.CommonData.Runtime.ContainerID, data.event.DstEndpoint.Addr)"
    profile_dependency: 1
    severity: 3
    support_policy: false
    tags:
      - "network"
      - "crypto"
      - "miners"
      - "malicious"
      - "networkprofile"
  - name: "Symlink Created Over Sensitive File"
    enabled: true
    id: "R1010"
    description: "Detects symlink creation over sensitive files"
    expressions:
      message: "'Symlink created over sensitive file: ' + data.event.OldPath + ' -> ' + data.event.NewPath"
      unique_id: "data.event.Comm + '_' + data.event.OldPath"
      rule_expression:
        - event_type: "symlink"
          expression: "(data.event.OldPath.startsWith('/etc/shadow') || data.event.OldPath.startsWith('/etc/sudoers')) && !ap.was_path_opened(data.event.Event.CommonData.Runtime.ContainerID, data.event.OldPath)"
    profile_dependency: 0
    severity: 5
    support_policy: true
    tags:
      - "anomaly"
      - "symlink"
      - "applicationprofile"
  - name: "LD_PRELOAD Hook"
    enabled: true
    id: "R1011"
    description: "Detecting ld_preload hook techniques."
    expressions:
      message: "'Process (' + data.event.Comm + ') was executed and is using the environment variable ' + process.get_ld_hook_var(data.event.Pid)"
      unique_id: "data.event.Comm + '_' + data.event.ExePath + '_' + data.event.Pcomm"
      rule_expression:
        - event_type: "exec"
          expression: "data.event.Comm != 'java' && data.event.Event.CommonData.K8s.BasicK8sMetadata.ContainerName != 'matlab' && process.get_ld_hook_var(data.event.Pid) != ''"
        - event_type: "open"
          expression: "data.event.FullPath == '/etc/ld.so.preload' && data.event.FlagsRaw > 0"
    profile_dependency: 1
    severity: 3
    support_policy: true
    tags:
      - "exec"
      - "malicious"
      - "applicationprofile"
  - name: "Hardlink Created Over Sensitive File"
    enabled: true
    id: "R1012"
    description: "Detecting hardlink creation over sensitive files."
    expressions:
      message: "'Hardlink created over sensitive file: ' + data.event.OldPath + ' - ' + data.event.NewPath"
      unique_id: "data.event.Comm + '_' + data.event.OldPath"
      rule_expression:
        - event_type: "hardlink"
          expression: "(data.event.OldPath.startsWith('/etc/shadow') || data.event.OldPath.startsWith('/etc/sudoers')) && !ap.was_path_opened(data.event.Event.CommonData.Runtime.ContainerID, data.event.OldPath)"
    profile_dependency: 1
    severity: 5
    support_policy: true
    tags:
      - "files"
      - "malicious"
      - "applicationprofile"
  - name: "Malicious Ptrace Usage"
    enabled: true
    id: "R1015"
    description: "Detecting potentially malicious ptrace usage."
    expressions:
      message: "'Malicious ptrace usage detected from: ' + data.event.Comm + ' on PID: ' + string(data.event.Pid)"
      unique_id: "data.event.ExePath + '_' + data.event.Comm"
      rule_expression:
        - event_type: "ptrace"
          expression: "true"
    profile_dependency: 2
    severity: 5
    support_policy: false
    tags:
      - "process"
      - "malicious"
  - name: "Unexpected io_uring Operation Detected"
    enabled: true
    id: "R1030"
    description: "Detects io_uring operations that were not recorded during the initial observation period, indicating potential unauthorized activity."
    expressions:
      message: "'Unexpected io_uring operation detected: (opcode=' + string(data.event.Opcode) + ') flags=0x' + string(data.event.Flags) + ' in ' + data.event.Comm + '.'"
      unique_id: "string(data.event.Opcode) + '_' + data.event.Comm"
      rule_expression:
        - event_type: "iouring"
          expression: "true"
    profile_dependency: 0
    severity: 5
    support_policy: true
    tags:
      - "syscalls"
      - "io_uring"
      - "applicationprofile"
