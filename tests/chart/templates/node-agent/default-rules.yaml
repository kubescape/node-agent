apiVersion: kubescape.io/v1
kind: Rules
metadata:
  name: kubescape-rules
  namespace: kubescape
  annotations:
    kubescape.io/namespace: kubescape
  labels:
    app: kubescape
spec:
  rules:
      - name: "Unexpected process launched"
        enabled: true
        id: "R0001"
        description: "Detects unexpected process launches that are not in the baseline"
        expressions:
          message: "'Unexpected process launched: ' + event.comm + ' with PID ' + string(event.pid)"
          uniqueId: "event.comm + '_' + event.exepath"
          ruleExpression:
            - eventType: "exec"
              expression: "!ap.was_executed(event.containerId, parse.get_exec_path(event.args, event.comm))"
        profileDependency: 0
        severity: 1
        supportPolicy: false
        tags:
          - "anomaly"
          - "process"
          - "exec"
          - "applicationprofile"
      - name: "Files Access Anomalies in container"
        enabled: true
        id: "R0002"
        description: "Detects unexpected file access that is not in the baseline"
        expressions:
          message: "'Unexpected file access detected: ' + event.comm + ' with PID ' + string(event.pid) + ' to ' + event.path"
          uniqueId: "event.comm + '_' + event.path"
          ruleExpression:
            - eventType: "open"
              expression: >
                (event.path.startsWith('/etc/') ||
                event.path.startsWith('/var/log/') ||
                event.path.startsWith('/var/run/') ||
                event.path.startsWith('/run/') ||
                event.path.startsWith('/var/spool/cron/') ||
                event.path.startsWith('/var/www/') ||
                event.path.startsWith('/var/lib/') ||
                event.path.startsWith('/opt/') ||
                event.path.startsWith('/usr/local/') ||
                event.path.startsWith('/app/') ||
                event.path == '/.dockerenv' ||
                event.path == '/proc/self/environ')
                &&
                !(event.path.startsWith('/run/secrets/kubernetes.io/serviceaccount') ||
                  event.path.startsWith('/var/run/secrets/kubernetes.io/serviceaccount') ||
                  event.path.startsWith('/tmp'))
                &&
                !ap.was_path_opened(event.containerId, event.path)
        profileDependency: 0
        severity: 1
        supportPolicy: false
        tags:
          - "anomaly"
          - "file"
          - "open"
          - "applicationprofile"
      - name: "Syscalls Anomalies in container"
        enabled: true
        id: "R0003"
        description: "Detects unexpected system calls that are not whitelisted by application profile"
        expressions:
          message: "'Unexpected system call detected: ' + event.syscallName + ' with PID ' + string(event.pid)"
          uniqueId: "event.syscallName"
          ruleExpression:
            - eventType: "syscall"
              expression: "!ap.was_syscall_used(event.containerId, event.syscallName)"
        profileDependency: 0
        severity: 1
        supportPolicy: false
        tags:
          - "anomaly"
          - "syscall"
          - "applicationprofile"
      - name: "Linux Capabilities Anomalies in container"
        enabled: true
        id: "R0004"
        description: "Detects unexpected capabilities that are not whitelisted by application profile"
        expressions:
          message: "'Unexpected capability used: ' + event.capName + ' in syscall ' + event.syscallName + ' with PID ' + string(event.pid)"
          uniqueId: "event.comm + '_' + event.capName"
          ruleExpression:
            - eventType: "capabilities"
              expression: "!ap.was_capability_used(event.containerId, event.capName)"
        profileDependency: 0
        severity: 1
        supportPolicy: false
        tags:
          - "anomaly"
          - "capabilities"
          - "applicationprofile"
      - name: "DNS Anomalies in container"
        enabled: true
        id: "R0005"
        description: "Detecting unexpected domain requests that are not whitelisted by application profile."
        expressions:
          message: "'Unexpected domain communication: ' + event.name + ' from: ' + event.containerName"
          uniqueId: "event.comm + '_' + event.name"
          ruleExpression:
            - eventType: "dns"
              expression: "!event.name.endsWith('.svc.cluster.local.') && !nn.is_domain_in_egress(event.containerId, event.name)"
        profileDependency: 0
        severity: 1
        supportPolicy: false
        tags:
          - "dns"
          - "anomaly"
          - "networkprofile"
      - name: "Unexpected service account token access"
        enabled: true
        id: "R0006"
        description: "Detecting unexpected access to service account token."
        expressions:
          message: "'Unexpected access to service account token: ' + event.path + ' with flags: ' + event.flags.join(',')"
          uniqueId: "event.comm"
          ruleExpression:
            - eventType: "open"
              expression: >
                ((event.path.startsWith('/run/secrets/kubernetes.io/serviceaccount') && event.path.endsWith('/token')) || 
                 (event.path.startsWith('/var/run/secrets/kubernetes.io/serviceaccount') && event.path.endsWith('/token')) ||
                 (event.path.startsWith('/run/secrets/eks.amazonaws.com/serviceaccount') && event.path.endsWith('/token')) ||
                 (event.path.startsWith('/var/run/secrets/eks.amazonaws.com/serviceaccount') && event.path.endsWith('/token'))) &&
                !ap.was_path_opened_with_prefix(event.containerId, '/run/secrets/kubernetes.io/serviceaccount') &&
                !ap.was_path_opened_with_prefix(event.containerId, '/var/run/secrets/kubernetes.io/serviceaccount') &&
                !ap.was_path_opened_with_prefix(event.containerId, '/run/secrets/eks.amazonaws.com/serviceaccount') &&
                !ap.was_path_opened_with_prefix(event.containerId, '/var/run/secrets/eks.amazonaws.com/serviceaccount')
        profileDependency: 1
        severity: 5
        supportPolicy: false
        tags:
          - "anomaly"
          - "serviceaccount"
          - "applicationprofile"
      - name: "Workload uses Kubernetes API unexpectedly"
        enabled: true
        id: "R0007"
        description: "Detecting execution of kubernetes client"
        expressions:
          message: "eventType == 'exec' ? 'Kubernetes client (' + event.comm + ') was executed with PID ' + string(event.pid) : 'Network connection to Kubernetes API server from container ' + event.containerName"
          uniqueId: "eventType == 'exec' ? 'exec_' + event.comm : 'network_' + event.dstAddr"
          ruleExpression:
            - eventType: "exec"
              expression: "(event.comm == 'kubectl' || event.exepath.endsWith('/kubectl')) && !ap.was_executed(event.containerId, parse.get_exec_path(event.args, event.comm))"
            - eventType: "network"
              expression: "event.pktType == 'OUTGOING' && k8s.is_api_server_address(event.dstAddr) && !nn.was_address_in_egress(event.containerId, event.dstAddr)"
        profileDependency: 0
        severity: 5 # Medium
        supportPolicy: false
        tags:
          - "exec"
          - "network"
          - "anomaly"
          - "applicationprofile"
      - name: "Read Environment Variables from procfs"
        enabled: true
        id: "R0008"
        description: "Detecting reading environment variables from procfs."
        expressions:
          message: "'Reading environment variables from procfs: ' + event.path + ' by process ' + event.comm"
          uniqueId: "event.comm + '_' + event.path"
          ruleExpression:
            - eventType: "open"
              expression: >
                event.path.startsWith('/proc/') && 
                event.path.endsWith('/environ') &&
                !ap.was_path_opened_with_suffix(event.containerId, '/environ')
        profileDependency: 0 # Required
        severity: 5 # Medium
        supportPolicy: false
        tags:
          - "anomaly"
          - "procfs"
          - "environment"
          - "applicationprofile"
      - name: "eBPF Program Load"
        enabled: true
        id: "R0009"
        description: "Detecting eBPF program load."
        expressions:
          message: "'bpf program load system call (bpf) was called by process (' + event.comm + ') with command (BPF_PROG_LOAD)'"
          uniqueId: "event.comm + '_' + 'bpf' + '_' + string(event.cmd)"
          ruleExpression:
            - eventType: "bpf"
              expression: "event.cmd == uint(5) && !ap.was_syscall_used(event.containerId, 'bpf')"
        profileDependency: 1
        severity: 5
        supportPolicy: false
        tags:
          - "bpf"
          - "ebpf"
          - "applicationprofile"
      - name: "Unexpected Sensitive File Access"
        enabled: true
        id: "R0010"
        description: "Detecting access to sensitive files."
        expressions:
          message: "'Unexpected sensitive file access: ' + event.path + ' by process ' + event.comm"
          uniqueId: "event.comm + '_' + event.path"
          ruleExpression:
            - eventType: "open"
              expression: "event.path.startsWith('/etc/shadow') && !ap.was_path_opened(event.containerId, event.path)"
        profileDependency: 1
        severity: 5
        supportPolicy: false
        tags:
          - "files"
          - "anomaly"
          - "applicationprofile"
      - name: "Unexpected Egress Network Traffic"
        enabled: true
        id: "R0011"
        description: "Detecting unexpected egress network traffic that is not whitelisted by application profile."
        expressions:
          message: "'Unexpected egress network communication to: ' + event.dstAddr + ':' + string(event.dstPort) + ' using ' + event.proto + ' from: ' + event.containerName"
          uniqueId: "event.dstAddr + '_' + string(event.dstPort) + '_' + event.proto"
          ruleExpression:
            - eventType: "network"
              expression: "event.pktType == 'OUTGOING' && !net.is_private_ip(event.dstAddr) && !nn.was_address_in_egress(event.containerId, event.dstAddr)"
        profileDependency: 0
        severity: 5 # Medium
        supportPolicy: false
        tags:
          - "whitelisted"
          - "network"
          - "anomaly"
          - "networkprofile"
      - name: "Process executed from malicious source"
        enabled: true
        id: "R1000"
        description: "Detecting exec calls that are from malicious source like: /dev/shm"
        expressions:
          message: "'Execution from malicious source: ' + event.exepath + ' in directory ' + event.cwd"
          uniqueId: "event.comm + '_' + event.exepath + '_' + event.pcomm"
          ruleExpression:
            - eventType: "exec"
              expression: >
                (event.exepath == '/dev/shm' || event.exepath.startsWith('/dev/shm/')) ||
                (event.cwd == '/dev/shm' || event.cwd.startsWith('/dev/shm/') || 
                (parse.get_exec_path(event.args, event.comm).startsWith('/dev/shm/')))
        profileDependency: 2
        severity: 8
        supportPolicy: false
        tags:
          - "exec"
          - "signature"
          - "malicious"
      - name: "Drifted process executed"
        enabled: true
        id: "R1001"
        description: "Detecting exec calls of binaries that are not included in the base image"
        expressions:
          message: "'Process (' + event.comm + ') was executed and is not part of the image'"
          uniqueId: "event.comm + '_' + event.exepath + '_' + event.pcomm"
          ruleExpression:
            - eventType: "exec"
              expression: >
                (event.upperlayer == true ||
                 event.pupperlayer == true) &&
                !ap.was_executed(event.containerId, parse.get_exec_path(event.args, event.comm))
        profileDependency: 1
        severity: 8
        supportPolicy: false
        tags:
          - "exec"
          - "malicious"
          - "binary"
          - "base image"
          - "applicationprofile"
      - name: "Process tries to load a kernel module"
        enabled: true
        id: "R1002"
        description: "Detecting Kernel Module Load."
        expressions:
          message: "'Kernel module (' + event.module + ') loading attempt with syscall (' + event.syscallName + ') was called by process (' + event.comm + ')'"
          uniqueId: "event.comm + '_' + event.syscallName + '_' + event.module"
          ruleExpression:
            - eventType: "kmod"
              expression: "event.syscallName == 'init_module' || event.syscallName == 'finit_module'"
        profileDependency: 2
        severity: 10
        supportPolicy: false
        tags:
          - "kmod"
          - "kernel"
          - "module"
          - "load"
      - name: "Disallowed ssh connection"
        enabled: true
        id: "R1003"
        description: "Detecting ssh connection to disallowed port"
        expressions:
          message: "'Malicious SSH connection attempt to ' + event.dstIp + ':' + string(dyn(event.dstPort))"
          uniqueId: "event.comm + '_' + event.dstIp + '_' + string(dyn(event.dstPort))"
          ruleExpression:
            - eventType: "ssh"
              expression: "dyn(event.srcPort) >= 32768 && dyn(event.srcPort) <= 60999 && !(dyn(event.dstPort) in [22, 2022]) && !nn.was_address_in_egress(event.containerId, event.dstIp)"
        profileDependency: 1
        severity: 5
        supportPolicy: false
        tags:
          - "ssh"
          - "connection"
          - "port"
          - "malicious"
          - "networkprofile"
      - name: "Process executed from mount"
        enabled: true
        id: "R1004"
        description: "Detecting exec calls from mounted paths."
        expressions:
          message: "'Process (' + event.comm + ') was executed from a mounted path'"
          uniqueId: "event.comm + '_' + event.exepath + '_'"
          ruleExpression:
            - eventType: "exec"
              expression: "!ap.was_executed(event.containerId, parse.get_exec_path(event.args, event.comm)) && k8s.get_container_mount_paths(event.namespace, event.podName, event.containerName).exists(mount, event.exepath.startsWith(mount) || parse.get_exec_path(event.args, event.comm).startsWith(mount))"
        profileDependency: 1
        severity: 5
        supportPolicy: false
        tags:
          - "exec"
          - "mount"
          - "applicationprofile"
      - name: "Fileless execution detected"
        enabled: true
        id: "R1005"
        description: "Detecting Fileless Execution"
        expressions:
          message: '''Fileless execution detected: exec call "'' + event.comm + ''" is from a malicious source'''
          uniqueId: "event.comm + '_' + event.exepath + '_' + event.pcomm"
          ruleExpression:
            - eventType: "exec"
              expression: "event.exepath.contains('memfd') || event.exepath.startsWith('/proc/self/fd') || event.exepath.matches('/proc/[0-9]+/fd/[0-9]+')"
        profileDependency: 2
        severity: 8
        supportPolicy: false
        tags:
          - "fileless"
          - "execution"
          - "malicious"
      - name: "Process tries to escape container"
        enabled: true
        id: "R1006"
        description: "Detecting Unshare System Call usage, which can be used to escape container."
        expressions:
          message: "'Unshare system call (unshare) was called by process (' + event.comm + ')'"
          uniqueId: "event.comm + '_' + 'unshare'"
          ruleExpression:
            - eventType: "unshare"
              expression: "!ap.was_syscall_used(event.containerId, 'unshare')"
        profileDependency: 2
        severity: 5
        supportPolicy: false
        tags:
          - "unshare"
          - "escape"
          - "unshare"
          - "anomaly"
          - "applicationprofile"
      - name: "Crypto miner launched"
        enabled: true
        id: "R1007"
        description: "Detecting XMR Crypto Miners by randomx algorithm usage."
        expressions:
          message: "'XMR Crypto Miner process: (' + event.exepath + ') executed'"
          uniqueId: "event.exepath + '_' + event.comm"
          ruleExpression:
            - eventType: "randomx"
              expression: "true"
        profileDependency: 2
        severity: 10
        supportPolicy: false
        tags:
          - "crypto"
          - "miners"
          - "malicious"
      - name: "Crypto Mining Domain Communication"
        enabled: true
        id: "R1008"
        description: "Detecting Crypto miners communication by domain"
        expressions:
          message: "'Communication with a known crypto mining domain: ' + event.name"
          uniqueId: "event.name + '_' + event.comm"
          ruleExpression:
            - eventType: "dns"
              expression: "event.name in ['2cryptocalc.com.', '2miners.com.', 'antpool.com.', 'asia1.ethpool.org.', 'bohemianpool.com.', 'botbox.dev.', 'btm.antpool.com.', 'c3pool.com.', 'c4pool.org.', 'ca.minexmr.com.', 'cn.stratum.slushpool.com.', 'dash.antpool.com.', 'data.miningpoolstats.stream.', 'de.minexmr.com.', 'eth-ar.dwarfpool.com.', 'eth-asia.dwarfpool.com.', 'eth-asia1.nanopool.org.', 'eth-au.dwarfpool.com.', 'eth-au1.nanopool.org.', 'eth-br.dwarfpool.com.', 'eth-cn.dwarfpool.com.', 'eth-cn2.dwarfpool.com.', 'eth-eu.dwarfpool.com.', 'eth-eu1.nanopool.org.', 'eth-eu2.nanopool.org.', 'eth-hk.dwarfpool.com.', 'eth-jp1.nanopool.org.', 'eth-ru.dwarfpool.com.', 'eth-ru2.dwarfpool.com.', 'eth-sg.dwarfpool.com.', 'eth-us-east1.nanopool.org.', 'eth-us-west1.nanopool.org.', 'eth-us.dwarfpool.com.', 'eth-us2.dwarfpool.com.', 'eth.antpool.com.', 'eu.stratum.slushpool.com.', 'eu1.ethermine.org.', 'eu1.ethpool.org.', 'fastpool.xyz.', 'fr.minexmr.com.', 'kriptokyng.com.', 'mine.moneropool.com.', 'mine.xmrpool.net.', 'miningmadness.com.', 'monero.cedric-crispin.com.', 'monero.crypto-pool.fr.', 'monero.fairhash.org.', 'monero.hashvault.pro.', 'monero.herominers.com.', 'monerod.org.', 'monerohash.com.', 'moneroocean.stream.', 'monerop.com.', 'multi-pools.com.', 'p2pool.io.', 'pool.kryptex.com.', 'pool.minexmr.com.', 'pool.monero.hashvault.pro.', 'pool.rplant.xyz.', 'pool.supportxmr.com.', 'pool.xmr.pt.', 'prohashing.com.', 'rx.unmineable.com.', 'sg.minexmr.com.', 'sg.stratum.slushpool.com.', 'skypool.org.', 'solo-xmr.2miners.com.', 'ss.antpool.com.', 'stratum-btm.antpool.com.', 'stratum-dash.antpool.com.', 'stratum-eth.antpool.com.', 'stratum-ltc.antpool.com.', 'stratum-xmc.antpool.com.', 'stratum-zec.antpool.com.', 'stratum.antpool.com.', 'supportxmr.com.', 'trustpool.cc.', 'us-east.stratum.slushpool.com.', 'us1.ethermine.org.', 'us1.ethpool.org.', 'us2.ethermine.org.', 'us2.ethpool.org.', 'web.xmrpool.eu.', 'www.domajorpool.com.', 'www.dxpool.com.', 'www.mining-dutch.nl.', 'xmc.antpool.com.', 'xmr-asia1.nanopool.org.', 'xmr-au1.nanopool.org.', 'xmr-eu1.nanopool.org.', 'xmr-eu2.nanopool.org.', 'xmr-jp1.nanopool.org.', 'xmr-us-east1.nanopool.org.', 'xmr-us-west1.nanopool.org.', 'xmr.2miners.com.', 'xmr.crypto-pool.fr.', 'xmr.gntl.uk.', 'xmr.nanopool.org.', 'xmr.pool-pay.com.', 'xmr.pool.minergate.com.', 'xmr.solopool.org.', 'xmr.volt-mine.com.', 'xmr.zeropool.io.', 'zec.antpool.com.', 'zergpool.com.', 'auto.c3pool.org.', 'us.monero.herominers.com.']"
        profileDependency: 2
        severity: 10
        supportPolicy: false
        tags:
          - "network"
          - "crypto"
          - "miners"
          - "malicious"
          - "dns"
      - name: "Crypto Mining Related Port Communication"
        enabled: true
        id: "R1009"
        description: "Detecting Crypto Miners by suspicious port usage."
        expressions:
          message: "'Detected crypto mining related port communication on port ' + string(event.dstPort) + ' to ' + event.dstAddr + ' with protocol ' + event.proto"
          uniqueId: "event.comm + '_' + string(event.dstPort)"
          ruleExpression:
            - eventType: "network"
              expression: "event.proto == 'TCP' && event.pktType == 'OUTGOING' && event.dstPort in [3333, 45700] && !nn.was_address_in_egress(event.containerId, event.dstAddr)"
        profileDependency: 1
        severity: 3
        supportPolicy: false
        tags:
          - "network"
          - "crypto"
          - "miners"
          - "malicious"
          - "networkprofile"
      - name: "Soft link created over sensitive file"
        enabled: true
        id: "R1010"
        description: "Detects symlink creation over sensitive files"
        expressions:
          message: "'Symlink created over sensitive file: ' + event.oldPath + ' -> ' + event.newPath"
          uniqueId: "event.comm + '_' + event.oldPath"
          ruleExpression:
            - eventType: "symlink"
              expression: "(event.oldPath.startsWith('/etc/shadow') || event.oldPath.startsWith('/etc/sudoers')) && !ap.was_path_opened(event.containerId, event.oldPath)"
        profileDependency: 1
        severity: 5
        supportPolicy: true
        tags:
          - "anomaly"
          - "symlink"
          - "applicationprofile"
      - name: "ld_preload hooks technique detected"
        enabled: true
        id: "R1011"
        description: "Detecting ld_preload hook techniques."
        expressions:
          message: "eventType == 'exec' ? 'Process (' + event.comm + ') is using a dynamic linker hook: ' + process.get_ld_hook_var(event.pid) : 'The dynamic linker configuration file (' + event.path + ') was modified by process (' + event.comm + ')'"
          uniqueId: "eventType == 'exec' ? 'exec_' + event.comm : 'open_' + event.path"
          ruleExpression:
            - eventType: "exec"
              expression: "event.comm != 'java' && event.containerName != 'matlab' && process.get_ld_hook_var(event.pid) != ''"
            - eventType: "open"
              expression: "event.path == '/etc/ld.so.preload' && has(event.flagsRaw) && event.flagsRaw != 0"
        profileDependency: 1
        severity: 5
        supportPolicy: true
        tags:
          - "exec"
          - "malicious"
          - "applicationprofile"
      - name: "Hard link created over sensitive file"
        enabled: true
        id: "R1012"
        description: "Detecting hardlink creation over sensitive files."
        expressions:
          message: "'Hardlink created over sensitive file: ' + event.oldPath + ' - ' + event.newPath"
          uniqueId: "event.comm + '_' + event.oldPath"
          ruleExpression:
            - eventType: "hardlink"
              expression: "(event.oldPath.startsWith('/etc/shadow') || event.oldPath.startsWith('/etc/sudoers')) && !ap.was_path_opened(event.containerId, event.oldPath)"
        profileDependency: 1
        severity: 5
        supportPolicy: true
        tags:
          - "files"
          - "malicious"
          - "applicationprofile"
      - name: "Malicious Ptrace Usage"
        enabled: true
        id: "R1015"
        description: "Detecting potentially malicious ptrace usage."
        expressions:
          message: "'Malicious ptrace usage detected from: ' + event.comm"
          uniqueId: "event.exepath + '_' + event.comm"
          ruleExpression:
            - eventType: "ptrace"
              expression: "true"
        profileDependency: 2
        severity: 5
        supportPolicy: false
        tags:
          - "process"
          - "malicious"
      - name: "Unexpected io_uring Operation Detected"
        enabled: true
        id: "R1030"
        description: "Detects io_uring operations that were not recorded during the initial observation period, indicating potential unauthorized activity."
        expressions:
          message: "'Unexpected io_uring operation detected: (opcode=' + string(event.opcode) + ') flags=0x' + (has(event.flagsRaw) ? string(event.flagsRaw) : '0') + ' in ' + event.comm + '.'"
          uniqueId: "string(event.opcode) + '_' + event.comm"
          ruleExpression:
            - eventType: "iouring"
              expression: "true"
        profileDependency: 0
        severity: 5
        supportPolicy: true
        tags:
          - "syscalls"
          - "io_uring"
          - "applicationprofile"
